#! /bin/bash
FILE=
ENV=
VOLUME_LIST=$(docker volume ls -q)

usage()
{
  echo "Usage:"
  echo "  -g or --ganache; for a ganache simulator"
  echo "  -l or --localhost; to connect to an already running blockchain on ws://localhost:8546"
  echo "  -d or --dev; to bind mount the filesystem and use it for development"
  echo "  --proving <proving_files folder>; to restore proving files and skip setup"
}

# select a Geth or Ganache client
if [ -z "$1" ]; then
  usage
  exit 1
fi

while [ -n "$1" ]; do
  case $1 in
      -g  | --ganache )             FILE="-f docker/docker-compose.multiproposer-test.yml -f docker/docker-compose.ganache.yml";
                                    ;;
      -l  | --localhost )           FILE="-f docker/docker-compose.multiproposer-test.yml -f docker/docker-compose.multiproposer-test.host.docker.internal.yml"
                                    ;;
      --proving)                    PROVING_FILES="$2"
                                    shift
                                    ;;
      * )                           usage
                              exit 1
    esac
  shift
done

# FILE should always be set.  Asking for -s on its own makes no sense
if [ -z "$FILE" ]; then
  usage
  exit 1
fi
# shut down cleanly in the event of a cntl-c etc. We don't want to leave containers running
trap "docker-compose $FILE -p 'nightfall_3' down --remove-orphans -t 1; exit 1" SIGHUP SIGINT SIGTERM

docker-compose -f docker/docker-compose.multiproposer-test.yml $FILE -p 'nightfall_3' down --remove-orphans

# if-else block checks - volume exist and then removes it.
if [[ $(echo $VOLUME_LIST | grep nightfall_3_optimist_mongodb_1) ]]; then
  echo -n 'Removing '
  docker volume rm nightfall_3_optimist_mongodb_1
fi

if [[ $(echo $VOLUME_LIST | grep nightfall_3_optimist_mongodb_2) ]]; then
  echo -n 'Removing '
  docker volume rm nightfall_3_optimist_mongodb_2
fi

if [[ $(echo $VOLUME_LIST | grep nightfall_3_build) ]]; then
  echo -n 'Removing '
  docker volume rm nightfall_3_build
fi

if [[ $(echo $VOLUME_LIST | grep nightfall_3_geth1-chain) ]]; then
  echo -n 'Removing '
  docker volume rm nightfall_3_geth1-chain
fi

if [[ $(echo $VOLUME_LIST | grep nightfall_3_geth-miner-chain1) ]]; then
  echo -n 'Removing '
  docker volume rm nightfall_3_geth-miner-chain1
fi

if [[ $(echo $VOLUME_LIST | grep nightfall_3_dag1) ]]; then
  echo -n 'Removing '
  docker volume rm nightfall_3_dag1
fi

if [ ! -z "$DEV" ]; then
  cd common-files && npm ci && cd ..
fi

if [ -f multiproposer-test.env ]; then
  ENV='--env-file ./multiproposer-test.env'
fi

if [ -n "$PROVING_FILES" ]; then
  # Usage: copy-to-docker-volume SRC_PATH DEST_VOLUME_NAME [DEST_PATH]
  copy-to-docker-volume() {
    SRC_PATH=$1
    DEST_VOLUME_NAME=$2
    DEST_PATH="${3:-}"
    # create smallest Docker image possible
    echo -e 'FROM scratch\nLABEL empty=""' | docker build -t empty -
    # create temporary container to be able to mount volume
    CONTAINER_ID=$(docker container create -v "${DEST_VOLUME_NAME}":/data empty cmd)
    # copy files to volume
    docker cp "${SRC_PATH}" "${CONTAINER_ID}":"/data/${DEST_PATH}"
    # remove temporary container
    docker rm "${CONTAINER_ID}"
  }

  docker volume create nightfall_3_proving_files
  copy-to-docker-volume "./proving_files/${PROVING_FILES}/." nightfall_3_proving_files 
fi

docker-compose $ENV $FILE  -p 'nightfall_3' up -d --remove-orphans
docker-compose -p 'nightfall_3' $FILE logs -f
